Notițe din Programarea în Limbajul C/C++ pentru liceu, vol. I
===============================================================================

- algoritm = o succesisiune de pași prin care prelucrezi niște date (de
  intrare) și obții niște rezultate (date de ieșire)

  Exemple: REȚETA de făcut plăcintă
           SUMA a două numere
              - se dau: A și B (date de intrare)
              - rezultă: C (date de ieșire)
              - pașii: C = A + B

- limbaj de programare = mijloc de comunicare între programator și calculator
- program = descrierea unui algoritm într-un limbaj de programare
- cod-mașină = limbajul procesorul, limbaj de asamblare, limbaj de nivel înalt
- exemple de limbaje de progrmare: FORTRAN, Pascal, C, C++, C#, Java etc

- identificatori (nume) = denumesc elemente din program: constante, variabile,
     funcții, ...; iar sintactic - succesiune de cuvinte, litere, caractere
     (cum ar fi _ underscore). Primul carecter: litera sau _

- limbajul C/C++ este case-sensitive - literele mici != mari

- cuvinte rezervate (cuvinte cheie = keywords). Exemple: if, while

- comentarii = sunt ignorate de către compilator
    /**/ se poate scrie mai multe linii de cod
    // comentariu pe o linie

- separatori = ' ', TAB, '\t', sfarsit de linie sau newline '\n'. , ; ' ""

- Structura generală a unui program C/C++ = succesiune de module (funcții)
    main()

- funcție: antetul (numele, tipul rezultatului returnat, parametri)
           corpul functiei

- Tipuri de date standard - aici intra tipuri de date naturale, intregi, de caracter, bool si void
    - date naturale = sunt reprezentate in baza 2 din 8, 16, 32 sau 64 de biti (unsigned char, short int, int, long int, long long int)
    - date intregi = sunt reprezentate in cod complementar pe 8, 16, 32 sau 64 biti (char, short int, int, long int, long long int)
    - date caracter = sunt utilizate doua tipuri unsigned char si char; iar acesta din urma poate avea o natura duala - caractere ASCII si nr. intregi
    - tipuri reale = sunt reprezentate de codul floating point (virgula mobila) iar aici intra: flaot, double, long double
    
- Variabile = o data care isi modifica valorea in timpul programului
    - inainte de a o folosi trebuie sa o declaram - iar aici specificam numele ei, tipul, eventual si o valoare a acesteia
    - se poate declara mai multe variabile de acelasi tip fiind separate prin virgula
    - cand se declara variabila i se poate atribui si o valoare prin careacterul '='
    - prin parantezele [] se descrie formatul general iar acesta poate sa apara sau nu in declaratia variabilei
    - globala daca este plasata in exteriorul unei functii
    - locala daca este plasata in interiorul functiei
    
- Preprocesare = un program lansat inainte de compilare executand toate directivele preprocesorului
    - directivele de preprocesor = incep cu caracterul # (ex.: #include, #define, #if, #undef, #line)
    => fisier antet (header) = este format din: declararea functiilor, constantelor, variabilelor, tipul definit intr-o biblioteca
            - este specific bibliotecii pe care dorim sa o utilizam 
                [ex.: #include<cmath> - pentru C++ (pentru functii matematice), <math.h> - pentru C (pentru functii matematice)
                <iostrim> - pentru C++ (pentru functii de intrare/iesire), <stdio.h> - pentru C (pentru functii de intrare/iesire)
                <cstdio> - pentru C++ (pentru functii de intrare/iesire)]
    - sursa = daca este scrisa in C (este salvat cu extensia .c) atunci header-ul va fi scris cu .h
          = daca este scrisa in C++ (este salvat cu extensia .cpp) atunci va fi doar header-ul fara .h
    - daca header-ul nu este in directorul curent atunci trebuie sa se specifice si calea catre acesta
    - constante simbolice = este bine de utilizat pentru a creste lizibilitatea programului
            - prin aceste constante programul este mult mai usor de corectat/modificat
    - hedear = contine atat constante simbolice cat si definitii
    
- Utilizarea functiilor din bibliotecile standard = setul de instuctiuni este restrans dar destul pentru implementarea eficienta si concisa a algoritmilor
    - sunt operatii care sunt utilizate destul de frecvent (ex. citirea, scrierea, extragerea radicalului, calculul modulului) nefiind insrtructiuni specifice
    - pot sa fie implementate cu ajutorul unor instructiuni existente in limbaj iar de aceea s-au construit biblioteci de functii pe care le contin
    - pentru a le utiliza este suficent doar sa includem in program header-ul si ulterior sa apelam functia  de care avem nevoie
    - utilizarea functiilor dintr-o biblioteca ar trebui sa se includa la inceput header-ul continand declaratiile functiilor din biblioteca
    - pentru apelarea functiei trebuie sa cunoastem numele si formatul(prototipul) ei
    => prototipul functiei = ne informeaza despre numele functiei, tipul valorii calculate si despre parametrii functiei, avand structura unui antet de functie
    - cand folosim o functie = o apelam - trebuie sa se specifice valorile functiei depre care o apelam
    - aceste valori ale parametrilor trebuie specificate pentru care functie se apeleaza
    - valorile de la acest parametru de apel trebuie sa corespunda ca numar, ordine si timp cu parametrii specificati

- Citirea/scrierea datelor = 
TEMĂ: de citit de la pagina 18 sus până la  21 jos
