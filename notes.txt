Notițe din Programarea în Limbajul C/C++ pentru liceu, vol. I
===============================================================================

- algoritm = o succesisiune de pași prin care prelucrezi niște date (de
  intrare) și obții niște rezultate (date de ieșire)

  Exemple: REȚETA de făcut plăcintă
           SUMA a două numere
              - se dau: A și B (date de intrare)
              - rezultă: C (date de ieșire)
              - pașii: C = A + B

- limbaj de programare = mijloc de comunicare între programator și calculator
- program = descrierea unui algoritm într-un limbaj de programare
- cod-mașină = limbajul procesorul, limbaj de asamblare, limbaj de nivel înalt
- exemple de limbaje de progrmare: FORTRAN, Pascal, C, C++, C#, Java etc

- identificatori (nume) = denumesc elemente din program: constante, variabile,
     funcții, ...; iar sintactic - succesiune de cuvinte, litere, caractere
     (cum ar fi _ underscore). Primul carecter: litera sau _

- limbajul C/C++ este case-sensitive - literele mici != mari

- cuvinte rezervate (cuvinte cheie = keywords). Exemple: if, while

- comentarii = sunt ignorate de către compilator
    /**/ se poate scrie mai multe linii de cod
    // comentariu pe o linie

- separatori = ' ', TAB, '\t', sfarsit de linie sau newline '\n'. , ; ' ""

- Structura generală a unui program C/C++ = succesiune de module (funcții)
    main()

- funcție: antetul (numele, tipul rezultatului returnat, parametri)
           corpul functiei

- Tipuri de date standard - aici intra tipuri de date naturale, intregi, de caracter, bool si void
    - date naturale = sunt reprezentate in baza 2 din 8, 16, 32 sau 64 de biti (unsigned char, short int, int, long int, long long int)
    - date intregi = sunt reprezentate in cod complementar pe 8, 16, 32 sau 64 biti (char, short int, int, long int, long long int)
    - date caracter = sunt utilizate doua tipuri unsigned char si char; iar acesta din urma poate avea o natura duala - caractere ASCII si nr. intregi
    - tipuri reale = sunt reprezentate de codul floating point (virgula mobila) iar aici intra: flaot, double, long double

- Variabile = o data care isi modifica valorea in timpul programului
    - inainte de a o folosi trebuie sa o declaram - iar aici specificam numele ei, tipul, eventual si o valoare a acesteia
    - se poate declara mai multe variabile de acelasi tip fiind separate prin virgula
    - cand se declara variabila i se poate atribui si o valoare prin careacterul '='
    - prin parantezele [] se descrie formatul general iar acesta poate sa apara sau nu in declaratia variabilei
    - globala daca este plasata in exteriorul unei functii
    - locala daca este plasata in interiorul functiei

- Preprocesare = un program lansat inainte de compilare executand toate directivele preprocesorului
    - directivele de preprocesor = incep cu caracterul # (ex.: #include, #define, #if, #undef, #line)
    => fisier antet (header) = este format din: declararea functiilor, constantelor, variabilelor, tipul definit intr-o biblioteca
            - este specific bibliotecii pe care dorim sa o utilizam
                [ex.: #include<cmath> - pentru C++ (pentru functii matematice), <math.h> - pentru C (pentru functii matematice)
                <iostrim> - pentru C++ (pentru functii de intrare/iesire), <stdio.h> - pentru C (pentru functii de intrare/iesire)
                <cstdio> - pentru C++ (pentru functii de intrare/iesire)]
    - sursa = daca este scrisa in C (este salvat cu extensia .c) atunci header-ul va fi scris cu .h
          = daca este scrisa in C++ (este salvat cu extensia .cpp) atunci va fi doar header-ul fara .h
    - daca header-ul nu este in directorul curent atunci trebuie sa se specifice si calea catre acesta
    - constante simbolice = este bine de utilizat pentru a creste lizibilitatea programului
            - prin aceste constante programul este mult mai usor de corectat/modificat
    - hedear = contine atat constante simbolice cat si definitii

- Utilizarea functiilor din bibliotecile standard = setul de instuctiuni este restrans dar destul pentru implementarea eficienta si concisa a algoritmilor
    - sunt operatii care sunt utilizate destul de frecvent (ex. citirea, scrierea, extragerea radicalului, calculul modulului) nefiind insrtructiuni specifice
    - pot sa fie implementate cu ajutorul unor instructiuni existente in limbaj iar de aceea s-au construit biblioteci de functii pe care le contin
    - pentru a le utiliza este suficent doar sa includem in program header-ul si ulterior sa apelam functia  de care avem nevoie
    - utilizarea functiilor dintr-o biblioteca ar trebui sa se includa la inceput header-ul continand declaratiile functiilor din biblioteca
    - pentru apelarea functiei trebuie sa cunoastem numele si formatul(prototipul) ei
    => prototipul functiei = ne informeaza despre numele functiei, tipul valorii calculate si despre parametrii functiei, avand structura unui antet de functie
    - cand folosim o functie = o apelam - trebuie sa se specifice valorile functiei depre care o apelam
    - aceste valori ale parametrilor trebuie specificate pentru care functie se apeleaza
    - valorile de la acest parametru de apel trebuie sa corespunda ca numar, ordine si timp cu parametrii specificati

- Citirea/scrierea datelor
    => citirea datelor = operatia prin care 1 sau mai multe variabile primesc valori prin introducerea lor de la
                              tastatura sau extragerea lor de pe un suport de memorie
    => scrierea datelor = operatia prin care rezultatul obtinut in urma prelucrarii datelor este afisata
                              pe ecranul monitorului
     - aceste operatii sunt denumite si operatii de intrare/iesire
     - in C/C++ instructiunile speciale pentru citirea/scrierea datelor nu exista
     - operatiile de acest gen se realizeaza prin functiile existente ale bibliotecilor standard ale libajului
     - operatiile de intrare/iesire difera intre limbajul C si C++
     - de aceasta data diferentele sunt majore intre operatiile de intrare/iesire ale celor 2 limbaje de programare
          C si C++ - pentru ca acesta din urma sunt proiectate din perspectiva POO

 - Citiri si scrieri in limbajul C++ = conceptul principal in operatiile de intrare/iesire in C++ - fluxul de intrare iesire (sau stream)
     - un stream este o succesiune de caracatere;
     - stream de intrare = secventa de caractere merge de la interior la exterior (la noi de la tastatura) catre memoria calculatorului
     - stream de iesire = secventa de caractere merge de la memoria pc-ului catre exterior (la noi la ecranul monitorului)

     - in iostream sunt 2 fluxuri standard declarate = 
		=> cin (console input) = flux de intrare de la tastatura
		=> cout (console output) = flux de iesire catre ecran

     - using namespace std = se va adauga la inceputul programului, dupa preprocesor; specificand ca utilizam spatiu de nume standard

     - ">>" - cand dorim sa extragem fluxul de intrare
     - cin>>variabila = are ca valorare fluxul de intrare (cin)
     - operatorul de extragere = operator de citire si se poate utiliza si inlantuit

   Obs.: - valorile numerice trebuie introduse de la tastatura fiind separate prin caractere albe; iar acestea sunt introduse cu ajutorul ">>"
	 - caracterele albe = sunt ignorate de operatorul de citire ">>"

      - "<<" (operator de iesire/scriere) - pentru scrierea datelor pe ecran si se poate scrie inlantuit cand dorim sa scriem mai multe date


 - Citiri si scrieri in limbajul C = se realizeaza cu ajutorul unor fuctii specifice

 - Citirea datelor cu format specificat 
	- fct. scanf - citeste datele sub format specificat; iar aceasta functie este declarata in fisierul antet stdio.h - care este si biblioteca
        - parcurge una sau mai multe succesiuni de caractere care este introdusa de la tastatura si extrage valorile care trbuie citite
        - in lista de parametrii ai functiei sunt memorate in ordine varibilele memorate
	- operatorul de referentiere (&) - ajuta la obtinerea adresei unei variabile
	- & - este unar - are un singur operator si acesta trebuie sa fie o varibila (ex. &variabila)
	- scanf - returneaza numarul de valori citite corect; iar in cazul unei erori se va intrerupe din citit pe pozitia in care a fost depistata eroarea
	- daca in lista de parametri se va specifica doar numele variabilei si nu si adresa acesteia, va citi doar valoare corestupnzatoare a acestei variabile

 Parametrul "format" - poate sa contina caractere albe si altfel de caractere si poate forma un sir de caractere
 - caracterele albe vor fi ignorate; iar celalalte caractere vor fi prezentate la intrare in pozitiile corespunzatoare

	- Caracterul (%) arata ca este un specificator de format si ca el trebuei sa contina o litera semnificand tipul valorii care se citeste.
	- Litera care indica tipul poate sa fie:
		=> "d" - se citeste un numar intreg scris in baza 10 si va fi memorat intr-o variabila de tip "int"
		=> "o" - se citeste un numar intreg scris in baza 8 si va fi memorat intr-o variabila de tip "int"
		=> "u" - se citeste un numar intreg scris in baza 10 si va fi memorat intr-o variabila de tip "unsigned int"
		=> "x" - se citeste un numar intreg scris in baza 16 si va fi memorat intr-o variabila de tip "int"
		=> "f, e sau g" - se citeste un numar real scris in baza 10 si va fi memorat intr-o variabila de tip "float"
		=> "c" - se citeste un caracter iar in acest caz caracterele albe prezente la intrare nu se ignora
		=> "s" - se citeste un sir de caractere si va incepe cu urmatorul caracter care nu este alb si continua pana la primul caracter alb pe care il intalneste sau pana la epuizarea dimenisiunii maxime
	- Caracterul (*) el indica inceputul unui specificator de format. Daca dorim ca la intrare sa apara (%) atunci vom utiliza constructia sintactica (%%).

	- Citirea caracterelor - au fost elaborate caractere speciale; de exemplu: "getchar"
			       - se citeste de la tastatura un caracter si functia va da codul ASCII pentru caracterul acela
	- Afisarea datelor cu format - se realizeaza daca apelezi functia "printf()"
				     - se evalueaza expresiile, se scriu in oridinea valorilor acestora, specificata de parametrul "format" 
				     - in acest caz functia returneaza numarul de caractere afisate
		- Parametrul "format" este un sir de caractere si contine specificatori de format si alte caractere
		- Un specificator de format terbuie sa inceapa cu (%) trebuie sa contina o litera obligatoriu care sa indice tipul expresiei corespunzatoare; iar eventula si alte elemente optionale

			- Literele care indica tipul sunt:
				- d - se converteste din tipul "int" si se afiseaza in baza 10
				- o - se converteste din tipul "int" si se afiseaza in baza 8
				- u - se converteste din tipul "unsigned" si se afiseaza in baza 10
				- x, X - se converteste din tipul "int" si se afiseaza in baza 16
				- f - se converteste din tipul "float" si se afiseaza in formatul parte_intreaga.parte_zecimala
				- e, E - se converteste din tipul "float" si se afiseaza in formatul cifra.parte_zecimalae+-exponent
				- g - se aplica dintre conversiile literei f sau e
				- c - are ca valoare codul ASCII al unui caracter; afisand caracterul corespunzator
				- s - un sir de caractere care se va afisa pe ecran

TEMĂ: de citit pana la pagina 34
